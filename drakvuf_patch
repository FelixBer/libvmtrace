diff --git a/src/libdrakvuf/drakvuf.c b/src/libdrakvuf/drakvuf.c
index 9c4ccf4..054f8f4 100644
--- a/src/libdrakvuf/drakvuf.c
+++ b/src/libdrakvuf/drakvuf.c
@@ -150,7 +150,7 @@ void drakvuf_close(drakvuf_t drakvuf, const bool pause)
     g_free(drakvuf);
 }
 
-bool drakvuf_init(drakvuf_t* drakvuf, const char* domain, const char* rekall_profile, bool _verbose)
+bool drakvuf_init(drakvuf_t* drakvuf, const char* domain, const char* rekall_profile, bool _verbose, bool enable_cr3)
 {
 
     if ( !domain || !rekall_profile )
@@ -163,6 +163,7 @@ bool drakvuf_init(drakvuf_t* drakvuf, const char* domain, const char* rekall_pro
     *drakvuf = g_malloc0(sizeof(struct drakvuf));
     (*drakvuf)->rekall_profile = g_strdup(rekall_profile);
     (*drakvuf)->os = rekall_get_os_type(rekall_profile);
+    (*drakvuf)->enable_cr3 = enable_cr3;
 
     g_mutex_init(&(*drakvuf)->vmi_lock);
 
diff --git a/src/libdrakvuf/libdrakvuf.h b/src/libdrakvuf/libdrakvuf.h
index 8c8419c..368866d 100644
--- a/src/libdrakvuf/libdrakvuf.h
+++ b/src/libdrakvuf/libdrakvuf.h
@@ -211,6 +211,8 @@ typedef struct drakvuf_trap_info
     addr_t trap_pa;
     x86_registers_t* regs;
     drakvuf_trap_t* trap;
+    bool before_single_step;
+    addr_t rip_after_single_step;
     union
     {
         const cpuid_event_t* cpuid; /* For CPUID traps */
@@ -291,7 +293,8 @@ typedef void (*event_cb_t) (int fd, void* data);
 bool drakvuf_init (drakvuf_t* drakvuf,
                    const char* domain,
                    const char* rekall_profile,
-                   const bool verbose);
+                   const bool verbose,
+                   const bool enable_cr3);
 void drakvuf_close (drakvuf_t drakvuf, const bool pause);
 bool drakvuf_add_trap(drakvuf_t drakvuf,
                       drakvuf_trap_t* trap);
diff --git a/src/libdrakvuf/private.h b/src/libdrakvuf/private.h
index 61bcc42..e0782b7 100644
--- a/src/libdrakvuf/private.h
+++ b/src/libdrakvuf/private.h
@@ -217,6 +217,9 @@ struct drakvuf
     struct pollfd* event_fds;  // auto-generated pollfd for poll()
     int event_fd_cnt;          // auto-generated for poll()
     fd_info_t fd_info_lookup;  // auto-generated for fast drakvuf_loop lookups
+    addr_t pa_before[16];
+    drakvuf_trap_info_t info_before[16];
+    bool enable_cr3;
 };
 
 struct breakpoint
diff --git a/src/libdrakvuf/vmi.c b/src/libdrakvuf/vmi.c
index 7b08f86..993d87b 100644
--- a/src/libdrakvuf/vmi.c
+++ b/src/libdrakvuf/vmi.c
@@ -134,6 +134,21 @@ event_response_t vmi_reset_trap(vmi_instance_t vmi, vmi_event_t* event)
 {
     UNUSED(vmi);
     drakvuf_t drakvuf = event->data;
+
+    struct wrapper* s = g_hash_table_lookup(drakvuf->breakpoint_lookup_pa, &drakvuf->pa_before[event->vcpu_id]);
+    if(s)
+    {
+        GSList* loop = s->traps;
+        while (loop)
+        {
+            drakvuf_trap_t* trap = loop->data;
+            loop = loop->next;
+            drakvuf->info_before[event->vcpu_id].before_single_step = false;
+            drakvuf->info_before[event->vcpu_id].rip_after_single_step = event->x86_regs->rip;
+            trap->cb(drakvuf, &(drakvuf->info_before[event->vcpu_id]));
+        }
+    }
+
     PRINT_DEBUG("reset trap on vCPU %u, switching altp2m %u->%u\n", event->vcpu_id, event->slat_id, drakvuf->altp2m_idx);
     event->slat_id = drakvuf->altp2m_idx;
     return VMI_EVENT_RESPONSE_TOGGLE_SINGLESTEP | // Turn off singlestep
@@ -453,6 +468,9 @@ event_response_t pre_mem_cb(vmi_instance_t vmi, vmi_event_t* event)
 
         drakvuf->step_event[event->vcpu_id]->callback = post_mem_cb;
         drakvuf->step_event[event->vcpu_id]->data = pass;
+
+        PRINT_DEBUG("rsp : %lu\n",rsp);
+
         return rsp |
                VMI_EVENT_RESPONSE_TOGGLE_SINGLESTEP | // Turn on singlestep
                VMI_EVENT_RESPONSE_VMM_PAGETABLE_ID;
@@ -533,11 +551,14 @@ event_response_t int3_cb(vmi_instance_t vmi, vmi_event_t* event)
             .proc_data.pid       = proc_data.pid,
             .proc_data.ppid      = proc_data.ppid,
             .proc_data.userid    = proc_data.userid,
+            .before_single_step  = true,
             .trap_pa = pa,
             .regs = event->x86_regs,
             .vcpu = event->vcpu_id,
         };
 
+        drakvuf->info_before[event->vcpu_id] = trap_info;
+
         g_get_current_time(&trap_info.timestamp);
 
         loop = loop->next;
@@ -545,6 +566,8 @@ event_response_t int3_cb(vmi_instance_t vmi, vmi_event_t* event)
     }
     drakvuf->in_callback = 0;
 
+    drakvuf->pa_before[event->vcpu_id] = pa;
+
     g_free( (gpointer)proc_data.name );
 
     process_free_requests(drakvuf);
@@ -581,10 +604,10 @@ event_response_t cr3_cb(vmi_instance_t vmi, vmi_event_t* event)
     event->x86_regs->cr3 = event->reg_event.value;
 
     /* Flush the LibVMI caches */
-    vmi_v2pcache_flush(drakvuf->vmi, event->reg_event.previous);
-    vmi_pidcache_flush(drakvuf->vmi);
-    vmi_rvacache_flush(drakvuf->vmi);
-    vmi_symcache_flush(drakvuf->vmi);
+    // vmi_v2pcache_flush(drakvuf->vmi, event->reg_event.previous);
+    // vmi_pidcache_flush(drakvuf->vmi);
+    // vmi_rvacache_flush(drakvuf->vmi);
+    // vmi_symcache_flush(drakvuf->vmi);
 
     if ( drakvuf->os == VMI_OS_WINDOWS )
     {
@@ -1250,7 +1273,8 @@ void drakvuf_loop(drakvuf_t drakvuf)
         }
 
         /* check and process each fd if it was raised */
-        for (int poll_ix=0; poll_ix<drakvuf->event_fd_cnt; poll_ix++)
+        int poll_ix=0;
+        for (; poll_ix<drakvuf->event_fd_cnt; poll_ix++)
         {
             if ( !(drakvuf->event_fds[poll_ix].revents & (POLLIN | POLLERR)) )
             {
@@ -1415,7 +1439,7 @@ bool init_vmi(drakvuf_t drakvuf)
     if (rc < 0)
         return 0;
 
-    SETUP_INTERRUPT_EVENT(&drakvuf->interrupt_event, 0, int3_cb);
+    SETUP_INTERRUPT_EVENT(&drakvuf->interrupt_event, int3_cb);
     drakvuf->interrupt_event.data = drakvuf;
 
     if (VMI_FAILURE == vmi_register_event(drakvuf->vmi, &drakvuf->interrupt_event))
@@ -1424,13 +1448,16 @@ bool init_vmi(drakvuf_t drakvuf)
         return 0;
     }
 
-    SETUP_REG_EVENT(&drakvuf->cr3_event, CR3, VMI_REGACCESS_W, 0, cr3_cb);
-    drakvuf->cr3_event.data = drakvuf;
-
-    if (VMI_FAILURE == vmi_register_event(drakvuf->vmi, &drakvuf->cr3_event))
+    if(&drakvuf->enable_cr3)
     {
-        fprintf(stderr, "Failed to register CR3 event\n");
-        return 0;
+        SETUP_REG_EVENT(&drakvuf->cr3_event, CR3, VMI_REGACCESS_W, 0, cr3_cb);
+        drakvuf->cr3_event.data = drakvuf;
+
+        if (VMI_FAILURE == vmi_register_event(drakvuf->vmi, &drakvuf->cr3_event))
+        {
+            fprintf(stderr, "Failed to register CR3 event\n");
+            return 0;
+        }
     }
 
     SETUP_MEM_EVENT(&drakvuf->mem_event, ~0ULL, VMI_MEMACCESS_RWX, pre_mem_cb, 1);
